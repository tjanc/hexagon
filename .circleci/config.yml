version: 2

aliases:
  - &model-deps
    run:
      name: Install dev dependencies
      command: 'apt-get install -y cmake git python2.7-minimal python-minimal'
  - &install-emscripten
    run:
      name: Install and configure Emscripten
      command: |
        git clone https://github.com/juj/emsdk.git
        cd emsdk
        git pull
        ./emsdk install latest
        ./emsdk activate latest
  - &server-update
    run:
      name: "Add buster && Update"
      command: |
          echo "deb http://ftp.debian.org/debian buster main" >> /etc/apt/sources.list
          apt-get update
  - &server-deps
    run:
      name: Install cmake from buster
      command: 'apt-get -t buster install -y --no-install-recommends cmake libboost-system-dev libboost-program-options-dev libboost-filesystem-dev git openssl'

jobs:
  test-model-js:
    docker:
      - image: ubuntu:latest
    working_directory: /tmp/hexagon
    environment:
    steps:
      - run:
          name: Update
          command: 'apt-get update'
      - <<: *model-deps
      - checkout
      - <<: *install-emscripten
      - run:
          name: Configure, build & test
          command: |
            git submodule update --init --recursive
            source ./emsdk/emsdk_env.sh
            mkdir build && cd build
            emconfigure cmake .. -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=TRUE
            emmake make -j4 model-test
            ctest -j4

  test-model-binary:
    docker:
      - image: gcc:latest
    working_directory: /tmp/hexagon
    environment:
    steps:
      - <<: *server-update
      - <<: *server-deps
      - checkout
      - run:
          name: Configure, build & test
          command: |
            git submodule update --init --recursive
            mkdir build && cd build
            cmake ..
            make -j4 model-test
            ctest -j4

  build-server:
    docker:
      - image: gcc:latest
    working_directory: /tmp/hexagon
    environment:
    steps:
      - <<: *server-update
      - <<: *server-deps
      - checkout
      - run:
          name: Configure, build & test
          command: |
            git submodule update --init --recursive
            mkdir build && cd build
            cmake ..
            make -j4
            cpack -G 7Z

            git describe --tags > /tmp/hexagon/VERSION
            mkdir /tmp/hexagon/release
            mv *.7z -t /tmp/hexagon/release
            chmod -R o+rw /tmp/hexagon/release
            chmod o+rw /tmp/hexagon/VERSION

      - persist_to_workspace:
          root: /tmp/hexagon
          paths:
            - release
            - VERSION

  build-client:
    docker:
      - image: ubuntu:latest
    working_directory: /tmp/hexagon
    environment:
    steps:
      - run:
          name: Update
          command: 'apt-get update'
      - run:
          name: Install dev dependencies
          command: 'apt-get install -y cmake git python2.7-minimal python-minimal'
      - checkout
      - run:
          name: Install and configure Emscripten
          command: |
            git clone https://github.com/juj/emsdk.git
            cd emsdk
            git pull
            ./emsdk install latest
            ./emsdk activate latest
      - run:
          name: Configure, build & test
          command: |
            git submodule update --init --recursive
            source ./emsdk/emsdk_env.sh
            mkdir build && cd build
            emconfigure cmake .. -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=TRUE
            emmake make -j4
            cpack -G 7Z

            git describe --tags > /tmp/hexagon/VERSION
            mkdir /tmp/hexagon/release
            mv *.7z -t /tmp/hexagon/release
            chmod -R o+rw /tmp/hexagon/release
            chmod o+rw /tmp/hexagon/VERSION

      - persist_to_workspace:
          root: /tmp/hexagon
          paths:
            - release
            - VERSION

  publish-github-release:
    docker:
      - image: cibuilds/github:0.12
    working_directory: /tmp/hexagon
    steps:
      - attach_workspace:
          at: /tmp/hexagon
      - run:
          name: Publish Release on GitHub
          command: |
            TAG=$(cat VERSION | head -n 1)
            echo "Releasing Hexagon v${TAG}"
            ghr -t ${GITHUB_TOKEN} -n v${TAG} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${TAG} ./release

workflows:
  version: 2
  integration:
    jobs:
      - test-model-binary
      - test-model-js
      - build-client
      - build-server
      - publish-github-release:
          requires:
            - build-client
            - build-server
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/

